#!/usr/bin/env python3

"""Calculate the Gini coefficient of coverage over a genome.
Takes a .bed format coverage file generated by the Samtools -depth utility, structured as:

'scaffold    position    depth'

in tab delimited form.

Dependancies:
Python3.6<=
argparse
numpy
pandas
"""

import argparse
import sys
import numpy as  np
import pandas as pd
import time
from itertools import islice

def coverage_reader(cov_file, w):

    with open(cov_file, "r") as cov:

        lines = [int((line.split('\t')[-1]).split('\n')[0]) for line in cov.readlines()]

        if w == 1:
            return lines
        else:
            cov_array = [np.mean(lines[i:i+w]) for i in range(0, len(lines), w)]

    return cov_array

def gini(cov_array):

    s_cov_array = sorted(cov_array)
    height, l_area = 0, 0
    for c in s_cov_array:
        height += c
        l_area += height - c / 2.     ## where l_area is the area under the Lorenz curve
    eq_area = height * len(cov_array) / 2.     ## where eq_area is the area under the line of equality

    return (eq_area - l_area) / eq_area

def main(argv):

    parser = argparse.ArgumentParser(description="", version='1.0')

    parser.add_argument('script_path', action='store', help=argparse.SUPPRESS)
    parser.add_argument('cov_file', action='store', help='Coverage file in .bed format generated by Samtools -depth')

    parser.add_argument('-w', action='store', default=1, type=int, help='Window size. Coverage will be taken as the window mean. Default=1.')
    parser.add_argument('-G', action='store', default=False, type=str, help='Calculate GG curve using given range and step. E.g. 1,1000,5 will calculate G over window sizes 1-1000 with a step of 5. Default=False')

    args = parser.parse_args(argv)

    if args.G != False:
        g_array = []
        l, u, s = args.G.split(",")

        for w in range(int(l), int(u)+1, int(s)):
            cov_array = coverage_reader(args.cov_file, w)
            G=gini(cov_array)
            g_array.append(G)
            print("{window}\t{gini}".format(window=w, gini=G))

        print g_array

    else:
        cov_array = coverage_reader(args.cov_file, args.w)
        print("{w}\t{G}".format(w=args.w, G=gini(cov_array)))

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(__doc__)
        main([sys.argv[0], "-h"])
        sys.exit(1)
    main(sys.argv)
